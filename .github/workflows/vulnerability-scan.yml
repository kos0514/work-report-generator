# 定期的に依存関係の脆弱性スキャンを実行するワークフロー
name: Vulnerability Scan

# ワークフローのトリガー設定
on:
  # スケジュール実行の設定
  schedule:
    # 毎週月曜日の午前3時（UTC）に実行
    # cronの書式: '分 時 日 月 曜日'
    # 0 3 * * 1 = 毎週月曜日の午前3時00分
    - cron: '0 3 * * 1'

  # 手動実行も可能にする設定
  # GitHubのActionsタブから手動でワークフローを実行できる
  workflow_dispatch:

# 必要な権限の設定
permissions:
  contents: read           # リポジトリのコンテンツを読み取る権限
  security-events: write   # セキュリティイベント（脆弱性レポートなど）を書き込む権限

# 実行するジョブの定義
jobs:
  # 脆弱性スキャンを行うジョブ
  scan:
    # ジョブを実行する環境（Ubuntu最新版）
    runs-on: ubuntu-latest

    # 実行するステップの定義
    steps:
      # ステップ1: リポジトリのコードをチェックアウト
      - name: Checkout Repository
        uses: actions/checkout@v4  # GitHubが提供する公式アクション

      # ステップ2: Java開発環境のセットアップ
      - name: Set up JDK 21
        uses: actions/setup-java@v4  # Javaをセットアップするアクション
        with:
          java-version: '21'         # Javaのバージョン
          distribution: 'temurin'     # 使用するJava配布（Eclipse Temurin）
          cache: gradle              # Gradleのキャッシュを有効化（ビルド高速化）

      # ステップ3: Gradleのセットアップ
      # Gradleビルドツールを初期化し、依存関係を解決
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3  # Gradleの公式アクション

      # ステップ4: OWASP Dependency Checkによる脆弱性スキャンの実行
      # build.gradleで設定したOWASP Dependency Checkプラグインを実行
      - name: Run OWASP Dependency Check
        uses: gradle/actions/setup-gradle@v3  # Gradleコマンドを実行するアクション
        with:
          arguments: dependencyCheckAnalyze   # 実行するGradleタスク

      # ステップ5: スキャン結果をGitHub Security Alertsにアップロード
      # SARIF形式のレポートをGitHubのセキュリティタブに表示
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3  # SARIFファイルをアップロードするアクション
        with:
          sarif_file: build/reports/dependency-check-report.sarif  # レポートファイルのパス
          category: dependency-check  # セキュリティアラートのカテゴリ
